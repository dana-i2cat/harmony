# -*- python -*-
# ex: set syntax=python:

################################################################################
# Harmony buildbot testing configuration.
#
# Author: Alexander Willner <willner@cs.uni-bonn.de>
# Version: $Id$
#
# TODO: 
#  * None.
################################################################################


# config #######################################################################
svn_base = "https://svn.uva.netherlight.nl/projects/phosphorus-wp1"
svn_branch = "/trunk"
svn_user = "phosphorus-wp1-guest"
svn_pwd = "read4me"
#svn_poll=200
svn_timer=10
c = BuildmasterConfig = {}
c['projectName'] = "Harmony Serviceplane"
c['projectURL'] = "http://www.ist-phosphorus.eu"
c['buildbotURL'] = "https://bb.iv.cs.uni-bonn.de/harmony/testbed/"
################################################################################


# slaves #######################################################################
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("graves", "sec1ret", max_builds=7)]
c['slavePortnum'] = 8890
################################################################################


# trigger ######################################################################
from buildbot.changes.pb import PBChangeSource
#from buildbot.changes.svnpoller import SVNPoller
#c['change_source'] = SVNPoller(
#    svn_base,
#    svnuser=svn_user,
#    svnpasswd=svn_pwd,
#    pollinterval=svn_poll
#)
c['change_source'] = PBChangeSource()
################################################################################


# status #######################################################################
from buildbot.status import html

c['status'] = []
c['status'].append(html.WebStatus(http_port=8011))


from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@graves.cs.uni-bonn.de",
                                      extraRecipients=[
                                        "willner@cs.uni-bonn.de",
                                        "joan.antoni.garcia@i2cat.net",
                                        "jordi.ferrer@i2cat.net"],
                                      sendToInterestedUsers=False,
                                      mode="failing", addLogs=True))
################################################################################


# functions ####################################################################
def addRealDummySteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealDummyTests"],
                            description="Testing real dummy",
                            descriptionDone="Real dummy tested",
                            )
def addRealViolaSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealViolaTests"],
                            description="Testing real viola",
                            descriptionDone="Real viola tested",
                            )
def addRealI2catSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealI2catTests"],
                            description="Testing real I2cat",
                            descriptionDone="Real I2cat tested",
                            )
def addRealCRCSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealCRCTests"],
                            description="Testing real CRC",
                            descriptionDone="Real CRC tested",
                            )
def addRealUESSEXSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealUESSEXTests"],
                            description="Testing real UESSEX",
                            descriptionDone="Real UESSEX tested",
                            )
def addRealPSNCSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealPSNCTests"],
                            description="Testing real PSNC",
                            descriptionDone="Real PSNC tested",
                            )
def addRealIDCSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealIDCTests"],
                            description="Testing real IDC",
                            descriptionDone="Real IDC tested",
                            )
def addRealG2MPLSSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealG2MPLSTests"],
                            description="Testing real G2MPLS",
                            descriptionDone="Real G2MPLS tested",
                            )
def addRealHSVOSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealHSVOTests"],
                            description="Testing real HSVO",
                            descriptionDone="Real HSVO tested",
                            )
def addRealKistiSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealKistiTests"],
                            description="Testing real Kisti",
                            descriptionDone="Real Kisti tested",
                            )
def addSecureI2catSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=SecureI2catTests"],
                            description="Testing secure I2cat",
                            descriptionDone="Secure I2cat tested",
                            )
def addRealWorkflowSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testRealtestbed", "-Dclass=RealWorkflowTests"],
                            description="Testing real workflow",
                            descriptionDone="Real worklow tested",
                            )

def addVirtualSteps(factory, module):
    factory.addStep(Test, 
                command=["ant", "testVirtualtestbed"],
                            description="Testing virtual testbed",
                            descriptionDone="Real virtual tested",
                            )

def addPrepareSteps(factory, module):
    factory.addStep(SVN,
                    baseURL=svn_base + module,
                    defaultBranch=svn_branch,
                    mode="clobber"
            )
    factory.addStep(Configure, 
                command=["cp", "../../build.pre.sh", "."],
                            description="Adding pre build script",
                            descriptionDone="Pre build script added",
                            )
    factory.addStep(Configure,
                command=["cp", "../../build.post.sh", "."],
                            description="Adding post build script",
                            descriptionDone="Post build script added",
                            )
    factory.addStep(Configure,
                command=["sh", "./build.pre.sh"],
                            description="Starting pre build script",
                            descriptionDone="Pre build script started",
                            )
    factory.addStep(Configure, 
                command=["ant", "prepare"],
                            description="Preparing build system",
                            descriptionDone="Prepared build system",
                            )
    factory.addStep(Compile, 
                command=["ant", "build"],
                            description="Compiling sources",
                            descriptionDone="Sources compiled",
                            )

def newRealDummyBuilder(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealDummySteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder1(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealViolaSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder2(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealI2catSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder3(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealCRCSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder4(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealUESSEXSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder5(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealPSNCSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder6(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealIDCSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder7(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealWorkflowSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder8(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealHSVOSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder9(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealG2MPLSSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newRealBuilder10(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addRealKistiSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
def newSecureBuilder1(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addSecureI2catSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder

def newVirtualBuilder(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addVirtualSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
################################################################################

# builders #####################################################################
from buildbot.process import factory
from buildbot.steps.source import CVS
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Test
from buildbot.steps.python_twisted import Trial
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.source import SVN

realDummyBuilder = newRealDummyBuilder("graves", "/modules/test", "real dummy")
realBuilder1 = newRealBuilder1("graves", "/modules/test", "real Viola")
realBuilder2 = newRealBuilder2("graves", "/modules/test", "real I2cat")
realBuilder3 = newRealBuilder3("graves", "/modules/test", "real CRC")
realBuilder4 = newRealBuilder4("graves", "/modules/test", "real UESSEX")
realBuilder5 = newRealBuilder5("graves", "/modules/test", "real PSNC")
realBuilder6 = newRealBuilder6("graves", "/modules/test", "real IDC")
realBuilder7 = newRealBuilder7("graves", "/modules/test", "real Workflow")
realBuilder8 = newRealBuilder8("graves", "/modules/test", "real HSVO")
realBuilder9 = newRealBuilder9("graves", "/modules/test", "real G2MPLS")
realBuilder10 = newRealBuilder10("graves", "/modules/test", "real Kisti")
secureBuilder1 = newSecureBuilder1("graves", "/modules/test", "secure I2cat")
virtualBuilder = newVirtualBuilder("graves", "/modules/test", "virtual testbed")

c['builders'] = [realDummyBuilder,
                realBuilder1,
                realBuilder2,
                realBuilder3,
                realBuilder4,
                realBuilder5,
                realBuilder6,
                realBuilder8,
                realBuilder9,
                realBuilder10,
                secureBuilder1
                ]
bn = ["real dummy",
      "real Viola",
      "real I2cat",
      "real CRC",
#      "real UESSEX",
#      "real PSNC",
#      "real IDC",
      "real HSVO",
      "real G2MPLS",
      "real Kisti",
      "secure I2cat"
]
################################################################################


# scheduler ####################################################################
from buildbot.scheduler import Scheduler
from buildbot import scheduler
from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.pb import PBChangeSource
c['schedulers'] = []

c['schedulers'].append(
    scheduler.Nightly(name='nightly',
                      builderNames=bn,
                      hour=3,
                      minute=0
    )
)

c['schedulers'].append(
        Scheduler(
                name="on demand",
                branch=None,
                treeStableTimer=svn_timer,
                builderNames=bn,
        )
)
################################################################################
