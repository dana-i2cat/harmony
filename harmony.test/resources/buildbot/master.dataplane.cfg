# -*- python -*-
# ex: set syntax=python:

################################################################################
# Harmony buildbot testing configuration.
#
# Author: Alexander Willner <willner@cs.uni-bonn.de>
# Author: Jordi Ferrer-Riera <jordi.ferrer@i2cat.net>
# Version: $Id$
#
# TODO: 
#  * None.
################################################################################


# config #######################################################################
svn_base = "https://svn.uva.netherlight.nl/projects/phosphorus-wp1"
svn_branch = "/trunk"
svn_user = "phosphorus-wp1-guest"
svn_pwd = "read4me"
#svn_poll=200
svn_timer=10
c = BuildmasterConfig = {}
c['projectName'] = "Harmony - Data plane"
c['projectURL'] = "http://www.ist-phosphorus.eu"
c['buildbotURL'] = "http://kif.phosphorus.i2cat.cat:8012/"
################################################################################


# slaves #######################################################################
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("amy", "buildbot", max_builds=1)]
c['slavePortnum'] = 8020
################################################################################


# trigger ######################################################################
from buildbot.changes.pb import PBChangeSource
#from buildbot.changes.svnpoller import SVNPoller
#c['change_source'] = SVNPoller(
#    svn_base,
#    svnuser=svn_user,
#    svnpasswd=svn_pwd,
#    pollinterval=svn_poll
#)
c['change_source'] = PBChangeSource()
################################################################################


# status #######################################################################
from buildbot.status import html

c['status'] = []
c['status'].append(html.WebStatus(http_port=8012))


from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@kif.phosphorus.i2cat.cat",
                                      extraRecipients=[
                                         "jordi.ferrer@i2cat.net"],
                                      sendToInterestedUsers=True,
                                      mode="failing", addLogs=True))
################################################################################


# functions ####################################################################
def addDataPlaneCrcSteps(factory, module):
	factory.addStep(Test,
		command=["ant", "testDataPlane", "-Dclass=DataPlaneCRCTest"],
			description="Testing data plane CRC",
			descriptionDone="Data plane @CRC tested",
			)

def addDataPlaneViolaSteps(factory, module):
	factory.addStep(Test,
		command=["ant", "testDataPlane", "-Dclass=DataPlaneViolaTest"],
			description="Testing data plane VIOLA",
			descriptionDone="Data plane @VIOLA tested",
			)

def addDataPlaneUessexSteps(factory, module):
	factory.addStep(Test,
		command=["ant", "testDataPlane", "-Dclass=DataPlaneUESSEXTest"],
			description="Testing data plane UESSEX",
			descriptionDone="Data plane @UESSEX tested",
			)


def addPrepareSteps(factory, module):
    factory.addStep(SVN,
                    baseURL=svn_base + module,
                    defaultBranch=svn_branch,
                    mode="clobber",
            )


    factory.addStep(Configure,
		command=["ant", "prepare"],
			description="Preparing build system",
			descriptionDone="Prepared build system",
			)
    factory.addStep(ShellCommand,
                command=["cp", "./resources/properties/dataplane.properties", "./dataplane.properties.old"],
                        description="Saving default dataplane.properties",
                        descriptionDone="Saved default dataplane.properties",
                        )

    factory.addStep(ShellCommand,
                command=["cp","../../dataplane.properties.pre", "./resources/properties/dataplane.properties"],
                        description="Editing default dataplane.properties",
                        descriptionDone="Edited default dataplane.properties",
                        )
    factory.addStep(Compile,
		command=["ant", "init"],
			description="Downloading dependent libraries",
			descriptionDone="Downloaded dependent libraries",
			)
                           
    factory.addStep(Compile, 
                command=["ant", "build"],
                            description="Compiling sources",
                            descriptionDone="Sources compiled",
                            )

def newDataPlaneCrcBuilder(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addDataPlaneCrcSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder

def newDataPlaneViolaBuilder(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addDataPlaneViolaSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder


def newDataPlaneUessexBuilder(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addDataPlaneUessexSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder

################################################################################

# builders #####################################################################
from buildbot.process import factory
from buildbot.steps.source import CVS
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Test
from buildbot.steps.python_twisted import Trial
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.source import SVN

crcBuilder = newDataPlaneCrcBuilder("amy", "/modules/test", "i2cat - crc")
violaBuilder = newDataPlaneViolaBuilder("amy", "/modules/test", "i2cat - viola")
essexBuilder = newDataPlaneUessexBuilder("amy","/modules/test", "i2cat - uessex")

c['builders'] = [crcBuilder,
		violaBuilder,
		essexBuilder,
                ]
bn = ["i2cat - crc",
	"i2cat - viola",
	"i2cat - uessex"
]
################################################################################


# scheduler ####################################################################
from buildbot.scheduler import Scheduler
from buildbot import scheduler
from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.pb import PBChangeSource
c['schedulers'] = []

c['schedulers'].append(
    scheduler.Nightly(name='nightly',
                      builderNames=bn,
                      hour=6,
                      minute=30,
    )
)

c['schedulers'].append(
        Scheduler(
                name="on demand",
                branch=None,
                treeStableTimer=svn_timer,
                builderNames=bn,
        )
)
################################################################################
