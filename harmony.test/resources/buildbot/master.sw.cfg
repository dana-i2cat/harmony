# -*- python -*-
# ex: set syntax=python:

################################################################################
# Harmony buildbot testing configuration.
#
# Author: Alexander Willner <willner@cs.uni-bonn.de>
# Version: $Id$
#
# TODO: 
#  * Add nightly DB task
################################################################################


# config #######################################################################
svn_base = "https://svn.uva.netherlight.nl/projects/phosphorus-wp1"
svn_branch = "/trunk"
svn_user = "phosphorus-wp1-guest"
svn_pwd = "read4me"
svn_poll=200
svn_timer=10
c = BuildmasterConfig = {}
c['projectName'] = "Harmony"
c['projectURL'] = "http://www.ist-phosphorus.eu"
c['buildbotURL'] = "https://bb.iv.cs.uni-bonn.de/harmony/sw/"
################################################################################


# slaves #######################################################################
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("graves", "sec1ret", max_builds=2),
               BuildSlave("chablis", "sec1ret", max_builds=2),
               BuildSlave("buzet", "sec1ret", max_builds=2),
               BuildSlave("sevilla", "sec1ret", max_builds=4)]
c['slavePortnum'] = 8889
################################################################################


# trigger ######################################################################
from buildbot.changes.pb import PBChangeSource
from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = (SVNPoller(
                                svn_base,
                                svnuser=svn_user,
                                svnpasswd=svn_pwd,
                                pollinterval=svn_poll),
                      PBChangeSource()
)
################################################################################


# status #######################################################################
from buildbot.status import html

c['status'] = []
c['status'].append(html.WebStatus(http_port=8010))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
                                      extraRecipients=["willner@cs.uni-bonn.de"],
                                      sendToInterestedUsers=False,
                                      mode="failing"))
################################################################################


# functions ####################################################################
def addGenWSSteps(factory, module):
    factory.addStep(ShellCommand, 
                command=["ant", "generate"],
                            description="Generating Webservice classes",
                            descriptionDone="Generated Webservice classes",
                            )

def addPrepareSteps(factory, module):
    factory.addStep(SVN,
                    baseURL=svn_base + module,
                    defaultBranch=svn_branch,
                    mode="update"
            )
    factory.addStep(Configure,
                command=["cp", "../../build.pre.sh", "."],
                            description="Adding pre build script",
                            descriptionDone="Pre build script added",
                            )
    factory.addStep(Configure,
                command=["cp", "../../build.post.sh", "."],
                            description="Adding post build script",
                            descriptionDone="Post build script added",
                            )
    factory.addStep(Configure,
                command=["sh", "./build.pre.sh"],
                            description="Starting pre build script",
                            descriptionDone="Pre build script started",
                            )
    factory.addStep(Configure,
                command=["ant", "prepare"],
                            description="Preparing build system",
                            descriptionDone="Prepared build system",
                            )

def addTestSteps(factory, module):                            
    factory.addStep(Compile,
                command=["ant", "clean"],
                            description="Cleaning up",
                            descriptionDone="Cleaned up",
                            )
    factory.addStep(Compile,
                command=["ant", "analyze"],
                            description="Compiling and checking sources",
                            descriptionDone="Compiled and checked sources",
                            warningPattern=".*\[findbugs\] H .*|.*\[findbugs\] M .*|.*\[findbugs\] L .*|.*\[pmd\] eu.*|.*warning[: ].*"
                            )
    factory.addStep(Compile,
                command=["ant", "todo"],
                            description="Checking for todos",
                            descriptionDone="Checked for todos",
                            warningPattern=".*\[findbugs\] H .*|.*\[findbugs\] M .*|.*\[findbugs\] L .*|.*\[pmd\] eu.*|.*warning[: ].*"
                            )
    factory.addStep(Test,
                command=["ant", "testJunit"],
                            description="Starting JUnit tests",
                            descriptionDone="JUnit results created",
                            )
    factory.addStep(ShellCommand,
                command=["sh", "./build.post.sh"],
                            description="Starting post build script",
                            descriptionDone="Post build script started",
                            )

def newDefaultBuilder(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addTestSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder

def newSpecialBuilder(slave, name, dir):
    myFactory = factory.BuildFactory()
    addPrepareSteps(myFactory, name)
    addGenWSSteps(myFactory, name)
    addTestSteps(myFactory, name)
    builder = {'name': dir, 'slavename': slave, 'builddir': dir,
               'factory': myFactory}
    return builder
################################################################################

# builders #####################################################################
from buildbot.process import factory
from buildbot.steps.source import CVS
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Test
from buildbot.steps.python_twisted import Trial
from buildbot.steps.shell import Compile, ShellCommand
from buildbot.steps.source import SVN

#buzet
#guiBuilder = newDefaultBuilder("buzet", 
#                               "/modules/ui/webgui", "webgui")
#sevilla
cliBuilder = newDefaultBuilder("graves",
                               "/modules/ui/reservationcli", "cli")
utlBuilder = newDefaultBuilder("graves", 
                               "/modules/common/utils", "utils")
#sevilla all
secBuilder = newDefaultBuilder("buzet",
                               "/modules/common/security", "security")
topologyBuilder = newDefaultBuilder("buzet", 
                               "/modules/ui/topologygui", "topologygui")
agnBuilder = newDefaultBuilder("buzet", 
                               "/modules/adapter/argon", "argon-adapter")
thinBuilder = newDefaultBuilder("buzet",
                               "/modules/adapter/thin", "thin-adapter")
idcBuilder = newDefaultBuilder("graves", 
                               "/modules/translator/idc", "idc")
#chablis
dmyBuilder = newDefaultBuilder("graves", 
                               "/modules/adapter/dummy", "dummy-adapter")

#graves
notifBuilder = newDefaultBuilder("graves", 
                               "/modules/notifications", "notifications")
dbBuilder = newDefaultBuilder("chablis", 
                               "/modules/common/database", "db")
g2mplsBuilder = newDefaultBuilder("graves", 
                               "/modules/translator/g2mpls", "g2mpls")
idbBuilder = newDefaultBuilder("buzet",
                               "/modules/idb", "idb")
hsiBuilder = newSpecialBuilder("graves",
                               "/modules/common/serviceinterface", "hsi")

c['builders'] = [hsiBuilder, cliBuilder, idbBuilder,
                 utlBuilder, dbBuilder, secBuilder, idcBuilder,
                 g2mplsBuilder, topologyBuilder,
                 dmyBuilder, thinBuilder, notifBuilder]
bn = ["hsi", "cli", "idb", "utils", "db", "security", "idc",
      "g2mpls", "topologygui", "dummy-adapter",
      "thin-adapter", "notifications"]
################################################################################


# scheduler ####################################################################
from buildbot.scheduler import Scheduler
from buildbot import scheduler
from buildbot.changes.svnpoller import SVNPoller
from buildbot.changes.pb import PBChangeSource
c['schedulers'] = []

#c['schedulers'].append(
#    scheduler.Nightly(name='nightly',
#                      builderNames=bn,
#                      hour=3,
#                      minute=0
#    )
#)

c['schedulers'].append(
        Scheduler(
                name="New SVN checkin",
                branch=None,
                treeStableTimer=svn_timer,
                builderNames=bn,
        )
)
################################################################################

